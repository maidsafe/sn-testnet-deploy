---
# The role is making the assumption that telegraf is installed in the base machine image.
# This is to avoid locking errors with apt.

- name: ensure target directory exists
  file:
    path: "{{ network_dashboard_repo_path }}"
    state: directory

- name: write private key to file
  copy:
    content: "{{ network_dashboard_private_key }}"
    dest: "{{ network_dashboard_sk_path }}"
    mode: '0600'

- name: check if network dashboard repo already cloned
  stat:
    path: "{{ network_dashboard_repo_path }}/.git"
  register: repo_stat

- name: clone the network dashboard repo
  git:
    repo: "{{ network_dashboard_github_url }}"
    dest: "{{ network_dashboard_repo_path }}"
    version: "{{ network_dashboard_branch }}"
    key_file: "{{ network_dashboard_sk_path }}"
    accept_hostkey: yes
  when: not repo_stat.stat.exists

- name: update the network dashboard repo
  git:
    repo: "{{ network_dashboard_github_url }}"
    dest: "{{ network_dashboard_repo_path }}"
    version: "{{ network_dashboard_branch }}"
    key_file: "{{ network_dashboard_sk_path }}"
    accept_hostkey: yes
    force: yes
  when: repo_stat.stat.exists
  register: git_update
  retries: 3
  delay: 5
  until: git_update is success

- name: ensure _telegraf can run safenode-manager without a password
  lineinfile:
    path: /etc/sudoers
    state: present
    line: "_telegraf ALL=NOPASSWD: /usr/local/bin/antctl"
    validate: "visudo -cf %s"

- name: copy telegraf environment file
  copy:
    src: "{{ network_dashboard_repo_path }}/telegraf/EnvironmentFile/antnodes/telegraf"
    dest: /etc/default/telegraf
    remote_src: yes

- name: replace ANTNODE_TESTNET_NAME value
  replace:
    path: "/etc/default/telegraf"
    regexp: 'ANTNODE_TESTNET_NAME=UNDEFINED'
    replace: 'ANTNODE_TESTNET_NAME={{ testnet_name | upper }}'

- name: replace ANTNODE_HOST_ROLE value
  replace:
    path: "/etc/default/telegraf"
    regexp: 'ANTNODE_HOST_ROLE=UNDEFINED'
    replace: 'ANTNODE_HOST_ROLE={{ node_type | upper }}'

# The real branch name will be supplied later, when it is available in `safenode`.
- name: replace ANTNODE_BRANCH_NAME value
  replace:
    path: "/etc/default/telegraf"
    regexp: "ANTNODE_BRANCH_NAME=UNDEFINED"
    replace: "ANTNODE_BRANCH_NAME=STABLE"

# The real commit hash will be supplied later, when it is available in `safenode`.
- name: replace ANTNODE_BRANCH_COMMIT value
  replace:
    path: "/etc/default/telegraf"
    regexp: "ANTNODE_BRANCH_COMMIT=UNDEFINED"
    replace: "ANTNODE_BRANCH_COMMIT=UNDEFINED"

- name: copy telegraf config file
  copy:
    src: "{{ network_dashboard_repo_path }}/telegraf/ConfigurationFile/antnodes/telegraf.conf"
    dest: /etc/telegraf/telegraf.conf
    remote_src: yes

- name: copy telegraf multi node config file
  copy:
    src: "{{ network_dashboard_repo_path }}/telegraf/ConfigurationFile/antnodes/telegraf_ant_multi_node.conf"
    dest: /etc/telegraf/telegraf.d/telegraf_ant_multi_node.conf
    remote_src: yes

- name: create directory for telegraf configurationfile
  file:
    path: /etc/telegraf-elasticsearch
    state: directory

# This empty dir is required for the service to work.
- name: create telegraf-elasticsearch.d subdir
  file:
    path: /etc/telegraf-elasticsearch/telegraf-elasticsearch.d
    state: directory

- name: copy telegraf elasticsearch config file from network dashboard repo
  copy:
    src: "{{ network_dashboard_repo_path }}/telegraf/ConfigurationFile/antnodes/telegraf_ant_multi_node_elasticsearch.conf"
    dest: /etc/telegraf-elasticsearch/telegraf_ant_multi_node_elasticsearch.conf
    remote_src: yes

- name: copy telegraf elasticsearch system service file from network dashboard repo
  copy:
    src: "{{ network_dashboard_repo_path }}/telegraf/SystemServiceFile/telegraf-elasticsearch.service"
    dest: /etc/systemd/system/telegraf-elasticsearch.service
    remote_src: yes

- name: reload systemd to apply service file changes
  systemd:
    daemon_reload: yes
  register: systemd_reload
  retries: 3
  delay: 5
  until: systemd_reload is success

- name: start telegraf-elasticsearch service
  systemd:
    name: telegraf-elasticsearch
    enabled: yes
    state: started
  register: telegraf_elasticsearch_start
  retries: 3
  delay: 5
  until: telegraf_elasticsearch_start is not failed
  when: enable_metrics | bool

- name: start telegraf service
  systemd:
    name: telegraf
    enabled: yes
    state: started
  register: telegraf_start
  retries: 3
  delay: 5
  until: telegraf_start is not failed
  when: enable_metrics | bool
