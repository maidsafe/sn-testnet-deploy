---
- name: check if ant binary exists
  ansible.builtin.stat:
    path: "{{ binary_dir }}/ant"
  register: ant_binary

- name: download the ant binary
  ansible.builtin.get_url:
    url: "{{ ant_archive_url }}"
    dest: "/tmp/{{ ant_archive_filename }}"
  when: not ant_binary.stat.exists

- name: extract the ant binary to /usr/local/bin
  ansible.builtin.unarchive:
    src: "/tmp/{{ ant_archive_filename }}"
    dest: "{{ binary_dir }}"
    remote_src: true
  become: true
  when: not ant_binary.stat.exists

- name: create ant group
  ansible.builtin.group:
    name: ant
    state: present
  become: true

- name: create ant users
  ansible.builtin.user:
    name: "ant{{ item }}"
    shell: /bin/bash
    group: ant
    state: present
  loop: "{{ range(1, ant_uploader_instances | int + 1) | list }}"
  become: true

- name: ensure the ant users can write to the log output destination
  ansible.builtin.file:
    path: "{{ log_output_dest }}"
    state: directory
    mode: '0775'
    owner: root
    group: ant
  become: true

- name: ensure the ant users can write to the upload metrics directory
  ansible.builtin.file:
    path: "/mnt/ant-storage/logs/upload_files/random_uploader"
    state: directory
    mode: '0775'
    owner: root
    group: ant
    recurse: yes
  become: true

- name: ensure individual ant user upload directories exist
  ansible.builtin.file:
    path: "/mnt/ant-storage/logs/upload_files/random_uploader/ant{{ item }}"
    state: directory
    mode: '0775'
    owner: "ant{{ item }}"
    group: ant
    recurse: yes
  become: true
  loop: "{{ range(1, ant_uploader_instances | int + 1) | list }}"

- name: ensure the data directory exists for random file generation
  ansible.builtin.file:
    path: "/mnt/client-logs/data"
    state: directory
    mode: '0775'
    owner: root
    group: ant
    recurse: yes
  become: true

- name: copy ant_random_uploader.sh to remote for each ant user
  ansible.builtin.template:
    src: ant_random_uploader.sh.j2
    dest: "/home/ant{{ item }}/ant_random_uploader.sh"
    owner: "ant{{ item }}"
    group: "ant"
    mode: '0744'
  become: true
  become_user: "ant{{ item }}"
  loop: "{{ range(1, ant_uploader_instances | int + 1) | list }}"

- name: Check if systemd service file exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/ant_random_uploader_{{ item }}.service"
  register: service_file_stat
  loop: "{{ range(1, ant_uploader_instances | int + 1) | list }}"

- name: create ant_random_uploader service file
  ansible.builtin.template:
    src: ant_random_uploader.service.j2
    dest: "/etc/systemd/system/ant_random_uploader_{{ item.0 }}.service"
    owner: "ant{{ item.0 }}"
    group: "ant"
    mode: '0644'
  become: true
  when: not service_file_stat.results[item.0 - 1].stat.exists
  loop: "{{ range(1, ant_uploader_instances | int + 1) | zip(ant_secret_key_map[inventory_hostname]) }}"
  vars: 
    count: "{{ item.0 }}"
    secret_key: "{{ item.1 }}"

- name: start and enable ant_random_uploader service for each uploader
  ansible.builtin.systemd:
    name: "ant_random_uploader_{{ item }}"
    state: started
    enabled: yes
  become: true
  loop: "{{ range(1, ant_uploader_instances | int + 1) | list }}"
  when: enable_uploaders | default(true) | bool
