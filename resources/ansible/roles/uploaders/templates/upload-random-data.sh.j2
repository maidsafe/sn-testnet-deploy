#!/usr/bin/env bash

# Check if SECRET_KEY is already set in .bashrc
if ! grep -q "export SECRET_KEY=" ~/.bashrc; then
  echo "export SECRET_KEY=${1}" >> ~/.bashrc
fi

# Reload .bashrc
source ~/.bashrc


CONTACT_PEER="${2:-}"

{% if not testnet_name.startswith('PROD-') %}
CONTACT_PEER_ARG=""
if [ -n "$CONTACT_PEER" ]; then
  CONTACT_PEER_ARG="--peer $CONTACT_PEER"
fi

if [ -z "$CONTACT_PEER" ]; then
  echo "No contact peer provided. Please provide the bootstrap peer."
  exit 1
fi
{% else %}
CONTACT_PEER_ARG=""
{% endif %}

if ! command -v ant &> /dev/null; then
  echo "Error: 'ant' not found in PATH."
  exit 1
fi

write_metrics_on_success() {
  local time=$1
  local file_size_kb=$2
  metrics_header
  number_of_chunks=$(echo "$stdout" | rg -o 'Number of chunks uploaded: [0-9]+' | rg -o '[0-9]+')
  store_cost=$(echo "$stdout" | rg -o 'Total cost: [0-9]+' | rg -o '[0-9]+' | head -n 1)

  echo "$time,$file_size_kb,$number_of_chunks,$store_cost" >> "./uploader_metrics.csv"
}

write_metrics_on_failure() {
  local time=$1
  local file_size_kb=$2
  metrics_header
  echo "$time,$file_size_kb" >> "./uploader_metrics.csv"
}

metrics_header() {
  if [ ! -f "./uploader_metrics.csv" ]; then
    echo "Total Time(s),File Size (KB),Number of Chunks,Store Cost (AttoTokens)" > "./uploader_metrics.csv"
  fi
}

generate_random_data_file_and_upload() {
  tmpfile=$(mktemp)
  dd if=/dev/urandom of="$tmpfile" bs=15M count=1 iflag=fullblock &> /dev/null

  echo "Generated random data file at $tmpfile"
  file_size_kb=$(du -k "$tmpfile" | cut -f1)

  now=$(date +"%s")
  stdout=$(ant $CONTACT_PEER_ARG file upload "$tmpfile" 2>&1)
  echo "$stdout"

  if [ $? -eq 0 ]; then
    echo "Successfully uploaded $tmpfile using SAFE CLI"

    file_ref=$(echo "$stdout" | grep -oP 'At address: \K\S+')
    if [ -z "$file_ref" ]; then
      echo "Error: Unable to extract file reference."
    else
      echo "$file_ref" >> "./uploaded_files.log"
    fi

    elapsed=$(($(date +"%s") - $now))
    write_metrics_on_success $elapsed $file_size_kb
  else
    echo "Failed to upload $tmpfile using SAFE CLI"
    elapsed=$(($(date +"%s") - $now))
    write_metrics_on_failure $elapsed $file_size_kb
  fi

  rm "$tmpfile"
}

while true; do
  echo "$(date +"%A, %B %d, %Y %H:%M:%S")"
  echo "Generating and uploading file..."
  generate_random_data_file_and_upload
  # TODO: re-enable when the new CLI has a `wallet balance` command
  # echo "$(ant $CONTACT_PEER_ARG wallet balance)"
done
