---
# This role should be called before setting up the nodes
- name: define conditional variables
  set_fact:
    nat_gateway_is_configured: false

- debug: var=nat_gateway_private_ip_map

- name: execute ip route show command
  command: ip route show
  register: ip_route_output

- name: retrieve private ip of the corresponding nat gateway
  set_fact:
    nat_gateway_private_ip_eth1: "{{ nat_gateway_private_ip_map[inventory_hostname] }}"

- name: set nat_gateway_is_configured to true if nat gateway is configured
  set_fact:
    nat_gateway_is_configured: true
  when: >
    ip_route_output.stdout is search('via ' + nat_gateway_private_ip_eth1 + ' dev')
  
- name: obtain do gateway ip
  command: curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/gateway
  register: do_gateway_ip
  when: not nat_gateway_is_configured

- name: retrieve eth1 ip address
  shell: ip -f inet addr show eth1 | grep -Po 'inet \K[\d.]+'
  register: eth1_ip_address
  when: not nat_gateway_is_configured

- name: remove existing routes from eth0
  block:
    - name: retrieve current netplan config
      slurp:
        src: /etc/netplan/50-cloud-init.yaml
      register: netplan_content
      
    - name: parse netplan yaml
      set_fact:
        netplan_config: "{{ netplan_content.content | b64decode | from_yaml }}"
        
    - name: remove public ip with /20 subnet from addresses
      set_fact:
        eth0_addresses: "{{ netplan_config.network.ethernets.eth0.addresses | reject('match', '^[0-9.]+/20$') | list }}"
        
    - name: update eth0 config with metadata route
      set_fact:
        updated_eth0: >-
          {{ netplan_config.network.ethernets.eth0 | combine({
            'addresses': eth0_addresses,
            'routes': [
              {
                'to': '169.254.169.254',
                'via': do_gateway_ip.stdout,
                'on-link': true
              }
            ]
          }) }}
        
    - name: update eth1 config with default route and DNS
      set_fact:
        updated_eth1: >-
          {{ netplan_config.network.ethernets.eth1 | combine({
            'routes': [
              {
                'to': '0.0.0.0/0',
                'via': nat_gateway_private_ip_eth1
              }
            ],

          }) }}
        
    - name: update full config
      set_fact:
        updated_netplan: >-
          {{ netplan_config | combine({
            'network': {
              'ethernets': {
                'eth0': updated_eth0,
                'eth1': updated_eth1
              }
            }
          }, recursive=true) }}
        
    - name: write updated netplan config
      copy:
        content: "{{ updated_netplan | to_nice_yaml }}"
        dest: /etc/netplan/50-cloud-init.yaml
  when: not nat_gateway_is_configured

- name: apply the netplan rules
  command: netplan apply -debug
  when: not nat_gateway_is_configured

- name: create systemd network config for eth1 with vpc peering routes
  template:
    src: 10-eth1.network.j2
    dest: /etc/systemd/network/10-eth1.network
    owner: root
    group: root
    mode: '0644'
  when: not nat_gateway_is_configured