---
- name: get the private IP for the instance
  set_fact:
    node_rpc_ip: "{{ instance_facts.instances[0].network_interfaces[0].private_ip_address }}"
  when: provider == "aws" and public_rpc

- name: use the public IP as the RPC address on DO
  set_fact:
    node_rpc_ip: "{{ ansible_host }}"
  when: provider == "digital-ocean" and public_rpc

- name: download the node manager binary
  ansible.builtin.get_url:
    url: "{{ node_manager_archive_url }}"
    dest: /tmp/{{ node_manager_archive_filename }}

- name: extract the node manager binary to /usr/local/bin
  become: True
  ansible.builtin.unarchive:
    src: "/tmp/{{ node_manager_archive_filename }}"
    dest: "{{ binary_dir }}"
    remote_src: True

- name: download the safenodemand binary
  ansible.builtin.get_url:
    url: "{{ safenodemand_archive_url }}"
    dest: /tmp/{{ safenodemand_archive_filename }}

- name: extract the safenodemand binary to /usr/local/bin
  become: True
  ansible.builtin.unarchive:
    src: "/tmp/{{ safenodemand_archive_filename }}"
    dest: "{{ binary_dir }}"
    remote_src: True

#
# Setup genesis node on genesis run
#
- name: check if genesis node is already set up
  become: True
  ansible.builtin.command: safenode-manager status --json
  register: genesis_status
  when: is_genesis

- name: parse genesis node status
  set_fact:
    genesis_exists: "{{ (genesis_status.stdout | from_json).nodes | selectattr('genesis', 'equalto', true) | list | length > 0 }}"
  when: is_genesis and genesis_status.stdout != ""

- name: add genesis node service
  become: True
  ansible.builtin.command:
    # The `omit` filter is used to remove the `--env` argument if the
    # `env_variables` variable is not defined. If the argv would be otherwise
    # defined as '', the command would fail as it doesn't expect an empty
    # argument, so it's omitted instead.
    argv: "{{ command_args | reject('equalto', omit) | list }}"
  vars:
    command_args:
      - "{{ binary_dir }}/safenode-manager"
      - -v
      - add
      - --first
      - --rpc-address={{ node_rpc_ip }}
      - "{{ ('--env=' + env_variables) if env_variables is defined else omit }}"
      - "{{ ('--version=' + version) if version is defined else ('--url=' + node_archive_url) }}"
  when: is_genesis and not genesis_exists | default(false)

#
# Setup remaining nodes on non-genesis run
#
- name: check current number of node services
  become: True
  ansible.builtin.command: safenode-manager status --json
  register: node_status

- name: calculate current non-genesis node count
  set_fact:
    current_node_count: "{{ (node_status.stdout | from_json).nodes | selectattr('genesis', 'equalto', false) | list | length }}"
  when: node_status.stdout != ""

- name: calculate number of nodes to add
  set_fact:
    nodes_to_add: "{{ node_instance_count | int - (current_node_count | default(0)) | int }}"

- name: add node services
  become: True
  ansible.builtin.command:
    # The `omit` filter is used to remove the `--env` argument if the
    # `env_variables` variable is not defined. If the argv would be otherwise
    # defined as '', the command would fail as it doesn't expect an empty
    # argument, so it's omitted instead.
    argv: "{{ command_args | reject('equalto', omit) | list }}"
  vars:
    command_args:
      - "{{ binary_dir }}/safenode-manager"
      - -v
      - add
      - "--count={{ nodes_to_add }}"
      - "--peer={{ genesis_multiaddr }}"
      - --rpc-address={{ node_rpc_ip }}
      - "{{ ('--env=' + env_variables) if env_variables is defined else omit }}"
      - "{{ ('--version=' + version) if version is defined else ('--url=' + node_archive_url) }}"
  when: not is_genesis and nodes_to_add | default(0) | int > 0

- name: start the node services
  become: True
  command: safenode-manager -v start

- name: add safenodemand
  become: true
  command: safenode-manager -v daemon add --address {{ node_rpc_ip }} --path "{{ binary_dir }}/safenodemand"

- name: start safenodemand
  become: true
  command: safenode-manager -v daemon start